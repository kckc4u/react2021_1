{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/searchBox/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","i","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","data","catch","err","console","log","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAIaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCHHC,G,MAAW,SAACC,GAAD,OACtB,qBAAKP,UAAU,YAAf,SACGO,EAAMC,SAASC,KAAI,SAACV,EAASW,GAAV,OAChB,cAAC,EAAD,CAAcX,QAASA,GAAZW,UCJNC,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBACKb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCXG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAEV,SAAUmB,OAE3BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,oBAOhC,WAAU,IAAD,EAC2BG,KAAKV,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YAEZc,EAAkBzB,EAAS0B,QAAO,SAACnC,GAAD,OACtCA,EAAQK,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAGlD,OACE,sBAAKnC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,SAASC,aAAcmB,KAAKnB,eACnD,cAAC,EAAD,CAAUL,SAAUyB,W,GAjCVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0e786b9b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.css\";\n\nexport const Card = ({ monster }) => (\n  <div className=\"card-container\">\n    <img alt=\"Monster\" src={`https://robohash.org/${monster.id}?set=set1&size=180x180`}/>\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n","import React from \"react\";\n\nimport { Card } from '../card/card.jsx';\nimport \"./card-list.css\";\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster, i) => (\n        <Card key={i} monster={monster} />\n    ))}\n  </div>\n);\n","import React from 'react';\n\nimport './search-box.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return <input\n                className=\"search\"\n                type=\"search\"\n                placeholder={placeholder}\n                onChange={handleChange}\n            />;\n}","import React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.jsx\";\nimport { SearchBox } from \"./components/searchBox/search-box.jsx\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ monsters: data });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonster = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}